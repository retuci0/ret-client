package me.retucio.retclient.features.modules.exploit;

import com.google.common.eventbus.Subscribe;

import me.retucio.retclient.event.events.PacketEvent;
import me.retucio.retclient.features.command.Command;
import me.retucio.retclient.features.modules.Module;
import me.retucio.retclient.features.settings.Setting;
import net.minecraft.network.packet.s2c.play.EntitySpawnS2CPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.entity.EntityType;
import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;

// TODO: make it work lmao

public class CoordLogger extends Module {
	
	
	private final Setting<Boolean> getSlimeCoords = register(new Setting<>("Slimes", true));
	private final Setting<Boolean> getThunderCoords = register(new Setting<>("Thunder", true));
	private final Setting<Boolean> getEndPortalCoords = register(new Setting<>("End Portal", true));
	private final Setting<Boolean> getWitherCoords = register(new Setting<>("Withers", true));
	private final Setting<ServerType> serverType = register(new Setting<>("Server Type", ServerType.VANILLA));
	private final Setting<Boolean> getDragonCoords = register(new Setting<>("Ender Dragon", true));

	public CoordLogger() {
		super("CoordLogger", "Gets coordinates from certain packets", Category.EXPLOIT, true, true, false);
	}
	
	@Subscribe
	public void onPacketReceive(PacketEvent.Receive event) {
		if (event.getPacket() instanceof EntitySpawnS2CPacket && getSlimeCoords.getValue().booleanValue()) {
			final EntitySpawnS2CPacket packet = (EntitySpawnS2CPacket) event.getPacket();
			
			if (packet.getEntityType() == EntityType.SLIME 
					&& packet.getY() <= 40
					&& !mc.world.getBiome(mc.player.getBlockPos())
						.value()
						.toString()
						.toLowerCase()
						.contains("swamp")) {
				
				final BlockPos blockPos = new BlockPos((int) packet.getX(), 
													    (int) packet.getY(), 
														(int) packet.getZ()
				);
				
				Command.sendMessage("Slime spawned in Chunk ->" 
						+ " X: " + mc.world.getChunk(blockPos).getPos().x
						+ " Z: " + mc.world.getChunk(blockPos).getPos().z
				);
			}
			
		}
		
		if (event.getPacket() instanceof PlaySoundS2CPacket) {
			final PlaySoundS2CPacket packet = (PlaySoundS2CPacket) event.getPacket();
			
			if (getThunderCoords.getValue().booleanValue()) {
				if (packet.getCategory() == SoundCategory.WEATHER && packet.getSound() == SoundEvents.ENTITY_LIGHTNING_BOLT_THUNDER) {
					
					float yaw = 0;
					final double diffX = packet.getX() - mc.player.getPos().x;
					final double diffZ = packet.getX() - mc.player.getPos().z;
					
					yaw += MathHelper.wrapDegrees((Math.toDegrees(Math.atan2(diffZ, diffX)) - 90.0f) - yaw);
					
					Command.sendMessage("Lightning spawned ->"
						+ " X: " + mc.player.getPos().x
						+ " Z: " + mc.player.getPos().z
						+ " Angle: " + yaw
					);
				}
			}
			
            if (getEndPortalCoords.getValue().booleanValue()) {
            	if (packet.getSound() == SoundEvents.BLOCK_END_PORTAL_SPAWN || packet.getSound() == SoundEvents.BLOCK_END_PORTAL_FRAME_FILL) {
            		
            		Command.sendMessage("End Portal activated ->" 
            				+ " X: " + packet.getX() 
            				+ " Y: " + packet.getY() 
            				+ " Z: " + packet.getZ()
            		);
            	}
            }
            
            if (getWitherCoords.getValue().booleanValue()) {
            	if (packet.getSound() == SoundEvents.ENTITY_WITHER_SPAWN) {
            		
            		switch (serverType.getValue()) {
            			case ServerType.VANILLA:
            				Command.sendMessage("Wither spawned ->"
            						+ " X: " + packet.getX()
            						+ " Y: " + packet.getY()
            						+ " Z: " + packet.getZ()
            				);
            				break;
            			
            			case ServerType.SPIGOT:
            				float yaw = 0;
            				final double diffX = packet.getX() - mc.player.getPos().x;
            				final double diffZ = packet.getX() - mc.player.getPos().z;
            				
            				yaw += MathHelper.wrapDegrees((Math.toDegrees(Math.atan2(diffZ, diffX)) - 90.0f) - yaw);
            				
            				Command.sendMessage("Wither spawned ->"
            						+ " X: " + mc.player.getPos().x
            						+ " Z: " + mc.player.getPos().z
            						+ " Angle: " + yaw
            				);
            				break;
            		}
            	}
            }
            
            if (getDragonCoords.getValue().booleanValue()) {
            	if (packet.getSound() == SoundEvents.ENTITY_ENDER_DRAGON_DEATH) {
                    float yaw = 0;
                    final double diffX = packet.getX() - mc.player.getPos().x;
                    final double diffZ = packet.getZ() - mc.player.getPos().y;

                    yaw += MathHelper.wrapDegrees((Math.toDegrees(Math.atan2(diffZ, diffX)) - 90.0f) - yaw);
                    
                    Command.sendMessage("Ender Dragon killed ->" 
		                    + " X: " + mc.player.getPos().x 
		                    + " Z: " + mc.player.getPos().z
		                    + " Angle: " + yaw
		            );
            	}
            }
		}
	}
	
	private enum ServerType {
		VANILLA,
		SPIGOT;
	}
}